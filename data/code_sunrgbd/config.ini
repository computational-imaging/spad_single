[params]
option = FusionDenoise
gpu = 0
noise_param_idx = 10

[FusionDenoise]
model_name = FusionDenoiseModel
logdir = ./logging
log_name = ${model_name}_${params:noise_param_idx}
train_files = util/train_intensity.txt
val_files = util/val_intensity.txt
resume = ./pth/fusion_denoise.pth
batch_size = 5
workers = 12
epochs = 2
lambda_tv = 1e-5
print_every = 10
save_every = 100
lr = 1e-4
optimizer = torch.optim.Adam(params, opt['lr'])

[Denoise]
model_name = DenoiseModel
logdir = ./logging
log_name = ${model_name}_${params:noise_param_idx}
train_files = util/train_intensity.txt
val_files = util/val_intensity.txt
resume = ./pth/denoise.pth
batch_size = 5
workers = 12
epochs = 4
lambda_tv = 1e-5
print_every = 10
save_every = 100
lr = 1e-4
optimizer = torch.optim.Adam(params, opt['lr'])

[Upsample8xDenoise]
model_name = Upsample8xDenoiseModel
logdir = ./logging
log_name = ${model_name}_${params:noise_param_idx}
train_files = util/train_intensity.txt
val_files = util/val_intensity.txt
resume = ./pth/fusion_denoise.pth
resume_msgnet = ./pth/MSGNet.pth
batch_size = 5
workers = 12
epochs = 1
lambda_up = 1e-5
print_every = 10
save_every = 100
lr = 1e-5
optimizer = torch.optim.SGD(params, lr=opt['lr'], momentum=0.9, nesterov=True)

[Upsample2xDenoise]
model_name = Upsample2xDenoiseModel
logdir = ./logging
log_name = ${model_name}_${params:noise_param_idx}
train_files = util/train_intensity.txt
val_files = util/val_intensity.txt
resume = ./pth/fusion_denoise.pth
resume_msgnet = ./pth/MSGNetx2.pth
batch_size = 5
workers = 12
epochs = 1
lambda_up = 1e-5
print_every = 10
save_every = 100
lr = 1e-5
optimizer = torch.optim.SGD(params, lr=opt['lr'], momentum=0.9, nesterov=True)

